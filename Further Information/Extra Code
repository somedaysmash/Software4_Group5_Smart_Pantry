- We wanted to include all extra code to show the progression of our project

*********************************************************************************************************

CODE FROM RecipeAPI.py file

- Extra code for function:
def get_random_recipe(query):

# Will use url/ params instead of very long URL
# response = requests.get(url=api_endpoint, params=payload)
# print(response.status_code)

# To access recipe name, ingredients and weight from data
                # try:
                #     refine_label = data['hits'][1]['recipe']['label']
                #     # To access ingredients and weights (grams to 2d.p.) from data
                #     refine_ingredient_weight = data['hits'][1]['recipe']['ingredients']
                #     text = [dictionary["text"] for dictionary in refine_ingredient_weight]
                #     weight = [dictionary["weight"] for dictionary in refine_ingredient_weight]
                #     weight_rounded = [round(n, 2) for n in weight]
                # except IndexError:
                #     print("Please enter ingredient name")
                # except NameError:
                #     print("Please try again")

                # # A zipped list of ingredients as keys, and weights as values
                # try:
                #     ingredients_and_weight= zip(text, weight_rounded)
                #     ingredient_list= list(ingredients_and_weight)
                #     dict_of_weights= dict((x,y) for x,y in ingredient_list)
                #     pp(dict_of_weights)
                # except NameError:
                #     print("Please try again")


    # # CSV file - ingredient items/ weights
    # aheader = ["Item", "Weight"]
    # with open('random_recipe.csv', 'w', newline='') as csv_file:
    #     file = csv.writer(csv_file)
    #     file.writerow([refine_label])
    #     file.writerow(aheader)
    #     file.writerows(ingredient_list)


- Extra code for function:
def run() -> None:

        # recipes = results['hits']
        # for recipe in recipes:
        #     recipe_data = recipe['recipe']
        #     print(recipe_data['label'])
        #     print(recipe_data['url'])
        #     print()


- Extra code for function:
def check_stock_for_recipe(ingredients_and_weight):
- Executing the queries - updated due to change in connection type

    # conn = sqlite3.connect('SmartPantryDB.sql')
    # cursor = conn.cursor()


            # cursor.execute(query_fridge, (ingredient, weight))
            # result_fridge = cursor.fetchone()
            #
            # cursor.execute(query_freezer, (ingredient, weight))
            # result_freezer = cursor.fetchone()
            #
            # cursor.execute(query_pantry, (ingredient, weight))
            # result_pantry = cursor.fetchone()


*********************************************************************************************************

CODE FROM Utilities.py file

# REDUNDANT FUNCTION TO ADD ITEM TO STOCK
# def add_item_fridge(_IngredientName, _TypeOfIngredient, _Quantity, _UnitofMeasurement, _MinimumQuantityNeeded, _SellByDate):
#     try:
#         db_name = 'Smart_Pantry'
#         db_connection = _connect_to_db(db_name)
#         cur = db_connection.cursor()
#         print(f'Connected to DB: {db_name}')
#         query = "INSERT INTO fridge (IngredientName, TypeOfIngredient, Quantity, UnitOfMeasurement, MinimumQuantityNeeded, SellByDate) VALUES (%s, %s, %s, %s, %s, %s)"
#         val = _IngredientName, _TypeOfIngredient, _Quantity, _UnitofMeasurement, _MinimumQuantityNeeded, _SellByDate
#         print(query, val)
#         cur.execute(query, val)
#         db_connection.commit()
#         cur.close()
#     except (NameError, ImportError, DbConnectionError) as e:
#         print(e)
#         raise
#     finally:
#         if db_connection:
#             db_connection.close()
#             print('DB connection is closed')

# def add_item_freezer(_IngredientName, _TypeOfIngredient, _Quantity, _UnitofMeasurement, _MinimumQuantityNeeded, _SellByDate):
#     try:
#         db_name = 'Smart_Pantry'
#         db_connection = _connect_to_db(db_name)
#         cur = db_connection.cursor()
#         print(f'Connected to DB: {db_name}')
#         query = "INSERT INTO freezer (IngredientName, TypeOfIngredient, Quantity, UnitOfMeasurement, MinimumQuantityNeeded, SellByDate) VALUES (%s, %s, %s, %s, %s, %s)"
#         val = _IngredientName, _TypeOfIngredient, _Quantity, _UnitofMeasurement, _MinimumQuantityNeeded, _SellByDate
#         print(query, val)
#         cur.execute(query, val)
#         db_connection.commit()
#         cur.close()
#     except (NameError, ImportError, DbConnectionError) as e:
#         print(e)
#         raise
#     finally:
#         if db_connection:
#             db_connection.close()
#             print('DB connection is closed')

# def add_item_pantry(_IngredientName, _TypeOfIngredient, _Quantity, _UnitofMeasurement, _MinimumQuantityNeeded, _SellByDate):
#     try:
#         db_name = 'Smart_Pantry'
#         db_connection = _connect_to_db(db_name)
#         cur = db_connection.cursor()
#         print(f'Connected to DB: {db_name}')
#         query = "INSERT INTO pantry (IngredientName, TypeOfIngredient, Quantity, UnitOfMeasurement, MinimumQuantityNeeded, SellByDate) VALUES (%s, %s, %s, %s, %s, %s)"
#         val = _IngredientName, _TypeOfIngredient, _Quantity, _UnitofMeasurement, _MinimumQuantityNeeded, _SellByDate
#         print(query, val)
#         cur.execute(query, val)
#         db_connection.commit()
#         cur.close()
#     except (NameError, ImportError, DbConnectionError) as e:
#         print(e)
#         raise
#     finally:
#         if db_connection:
#             db_connection.close()
#             print('DB connection is closed')

# REDUNDANT FUNCTION FOR RETRIEVE STOCK
fetch_protein_data_db():
#     db = SqlDatabase('Smart_Pantry')
#     db.connect()
#     query = ("SELECT ingredientname, quantity, sellbydate FROM proteinview ORDER BY sellbydate;"
#         )
#     # Execute the query and store the result
#     result = db.execute_query(query)
#     return result


REDUNDANT CODE FOR CLASS SHOPPINGLIST
    # def connect_to_database(self, host, user, password, database):
    #     try:
    #         self.connection = mysql.connector.connect(
    #             host=host,
    #             user=user,
    #             password=password,
    #             database=database
    #         )
    #     except mysql.connector.Error as err:
    #         print(f"Error: {err}")
    #         # Handle the error as needed


*********************************************************************************************************

REDUNDANT CODE FROM APP.py file

# @app.route('/add_item_fridge', methods=['PUT'])
# def new_item_fridge():
#     new_fridge_stock = request.get_json()
#     _add_item(
#         stock_store='fridge',
#         values=(
#             new_fridge_stock['IngredientName'],
#             new_fridge_stock['TypeOfIngredient'],
#             new_fridge_stock['Quantity'],
#             new_fridge_stock['UnitOfMeasurement'],
#             new_fridge_stock['MinimumQuantityNeeded'],
#             new_fridge_stock['SellByDate']
#         )
#     )
#     return new_fridge_stock
#
#
# @app.route('/add_item_freezer', methods=['PUT'])
# def new_item_freezer():
#     new_freezer_stock = request.get_json()
#     _add_item(
#         stock_store='freezer',
#         values=(
#             new_freezer_stock['IngredientName'],
#             new_freezer_stock['TypeOfIngredient'],
#             new_freezer_stock['Quantity'],
#             new_freezer_stock['UnitOfMeasurement'],
#             new_freezer_stock['MinimumQuantityNeeded'],
#             new_freezer_stock['SellByDate']
#         )
#     )
#     return new_freezer_stock
#
#
# @app.route('/add_item_pantry', methods=['PUT'])
# def new_item_pantry():
#     new_pantry_stock = request.get_json()
#     _add_item(
#         stock_store='pantry',
#         values=(
#             new_pantry_stock['IngredientName'],
#             new_pantry_stock['TypeOfIngredient'],
#             new_pantry_stock['Quantity'],
#             new_pantry_stock['UnitOfMeasurement'],
#             new_pantry_stock['MinimumQuantityNeeded'],
#             new_pantry_stock['SellByDate']
#         )
#     )
#     return new_pantry_stock


# @app.route('/return_file')
# def file_downloads():
#     file_path = "static/assets/shopping_list.txt"
#     return send_file(file_path, as_attachment=True, download_name='shopping_list.txt')



*********************************************************************************************************

REDUNDANT CODE FROM Main.py file

import requests
import json
from flask import url_for


# POST REQUEST (ADD)
def add_stock_item_fridge(IngredientName, TypeOfIngredient, Quantity, UnitOfMeasurement, MinimumQuantityNeeded, SellByDate):
    new_fridge_stock = {
        "_IngredientName": IngredientName,
        "_TypeOfIngredient": TypeOfIngredient,
        "_Quantity": Quantity,
        "_UnitOfMeasurement": UnitOfMeasurement,
        "_MinimumQuantityNeeded": MinimumQuantityNeeded,
        "_SellByDate": SellByDate,
    }

    try:
        result = requests.put(
            url_for('add_item_fridge'),
            headers={'content-type': 'application/json'},
            data=json.dumps(new_fridge_stock)
        )
        # raise an exception if the status code is not 200
        result.raise_for_status()
        print("here is the stock:", result)
        return result.json()
    except requests.exceptions.HTTPError as errh:
        # print the HTTP error
        print("HTTP Error:", repr(errh))
    except requests.exceptions.ConnectionError as errc:
        # print the connection error
        print("Connection Error:", repr(errc))
    except requests.exceptions.Timeout as errt:
        # print the timeout error
        print("Timeout Error:", repr(errt))
    except requests.exceptions.RequestException as err:
        # print any other error
        print("Other Error:", repr(err))


def run_fridge():
    add_to_fridge = input('Would you like to add stock to your fridge? Y/N')
    add_item = add_to_fridge.lower() == 'y'

    if add_item:
        IngredientName = input('What is the item name?')
        TypeOfIngredient = input('What type is this? Dairy, Protein, Vegetable, etc')
        Quantity = input('What quantity are you adding?')
        UnitOfMeasurement = input('What is the unit of measurement for the quantity?')
        MinimumQuantityNeeded = input("What's the minimum quanity of this you want to hold in stock?")
        SellByDate = input("What is the sell by date? Enter in format YYYY-MM-DD")
        add_stock_item_fridge(IngredientName, TypeOfIngredient, Quantity, UnitOfMeasurement, MinimumQuantityNeeded, SellByDate)
        print("We have added your item")

    print('See you soon!')


# PUT REQUEST (UPDATE)
def update_fridge():
    url = f'http://127.0.0.1:5000/update/fridge'
    response = requests.put(url)
    print(response)
    if response.status_code == 201:
        print(response.json())
    else:
        print(f"Failed to update fridge ingredient.")


# DELETE REQUEST (REMOVE)
def delete_stock_item_by_name():
    try:
        stock_store = input("Enter the stock store (fridge, freezer, pantry) from which you want to delete an item: ")
        item_name = input(f"Enter the name of the item you want to delete from {stock_store}: ")

        url = f'http://127.0.0.1:5000/delete/{stock_store}/{item_name}'
        response = requests.delete(url)

        if response.status_code == 200:
            print(response.json())
        else:
            print(f"Failed to delete {item_name} from {stock_store}.")

    except requests.exceptions.RequestException as err:
        print("Error:", repr(err))


if __name__ == "__main__":
    run_fridge()
    # update_fridge()
    # delete_stock_item_by_name()

